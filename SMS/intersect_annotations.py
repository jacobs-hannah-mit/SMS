# AUTOGENERATED! DO NOT EDIT! File to edit: 01_intersect_annotations.ipynb (unless otherwise specified).

__all__ = ['make_bed_file_given_window', 'intersect_bedtools', 'closest_bedtools',
           'plot_percent_annot_aganist_pip_bins']

# Cell
import pybedtools
import pandas as pd
import matplotlib as plt
import seaborn as sns

# Cell
def make_bed_file_given_window(df, num_bp, info, no_strand):

    start=df.v_start.astype('int')-num_bp
    end=df.v_start.astype('int')+num_bp
    score=[1]*len(df)

    strand = df['strand'].str.replace('r','-')
    strand = df['strand'].str.replace('f','+')

    df=df.assign(score=score)
    df=df.assign(strand=strand)

    if no_strand==True:
        forBed=pd.concat([df.chromosome, start, end, df[[info, 'score', 'strand']]], axis=1)

    else:
        forBed=pd.concat([df.chromosome, start, end, df[info]], axis=1)
    return forBed




# Cell
def intersect_bedtools(bed_to_to_intersect, annot_file, overlap):


    annot_dir='/Users/hnjacobs/Dropbox (MIT)/GradSchool/Finuance/sQTL_snakemake_wf/intersect/hg38/'

#intersect using pybedtools
    a = bed_to_to_intersect
    b = pybedtools.example_bedtool(annot_dir+annot_file)
#Then do the intersection with the BedTool.intersect() method:

    if overlap=='perfect':
#r paramater is that 100% of intron needs to intersect
        a_and_b = a.intersect(b,  wb=True, wa=True, r=True, f=0.99, e=False)
    elif overlap=='SNPs':
        a_and_b = a.intersect(b,  wb=True, wa=True, s=True)

    return a_and_b.to_dataframe()


# Cell
def closest_bedtools(bed_to_intersect, annot_file, annot_dir):

    a = bed_to_intersect
    #import file into pybedtools
    if annot_dir=='':
        annot_dir='/Users/hnjacobs/Dropbox (MIT)/GradSchool/Finuance/sQTL_snakemake_wf/intersect/hg38/'
    b = pybedtools.example_bedtool(annot_dir+annot_file)

#Then do the closest with the BedTool.closest() method, calculate distances

    a_and_b = a.closest(b, D="a", s=True)


    return a_and_b



# Cell
def plot_percent_annot_aganist_pip_bins(df, pip_bin_type, annotation):
# top bar -> sum all values(smoker=No and smoker=Yes) to find y position of the bars
    plt.figure(figsize=(7, 7))

    sns.set(font_scale=3)

# set plot style: grey grid in the background:
    sns.set(style="darkgrid")

    sum_df=df.groupby(pip_bin_type)[annotation].sum()
    size_df=df.groupby(pip_bin_type)[annotation].size()


    fraction_of_annot= sum_df.to_frame()/size_df.to_frame()*100

    ax=sns.barplot(data=fraction_of_annot, x=fraction_of_annot.index, y=annotation, palette='mako')

    ax.set_title(annotation)

    plt.ylabel('% of variants in' + str('annotation'))